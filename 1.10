#include <stdio.h>
#include <stdlib.h>

typedef struct man {
    char* name;
    int* number;
    struct man* next;
    struct man* prev;
} record;

typedef struct help_p {
    record* head;
    record* end;
} help;

int INSERT (help* l, record* new)
{
    if (l->head == NULL)
    {
        l->head = new;
        return 0;
    }
    record* f = malloc(sizeof(record));
    f = (l->head);
    while (f->next != NULL)
    {
        if (new->name == f->name)
        {
            printf("Changed. Old value = %d", f->number);
            f->number = new->number;
            free(new);
            return 0;
        }
        f = f->next;
    }
    if (new->name == f->name)
    {
        printf("Changed. Old value = %d", f->number);
        f->number = new->number;
        free(new);
        return 0;
    }
    l->head = new;
    new->next = l->head;
    (l->head)->prev = new;
    printf("OK");
    return 0;
}

int FIND(help* l, char* nname)
{
    record* f = malloc(sizeof(record));
    f = l->head;
    while (f->next != NULL)
    {
        printf("here");
        if (strcmp(nname, f->name) == 0)
        {
            printf("%d", f->number);
            return 0;
        }
        f = f->next;
    }
    if (strcmp(nname, f->name) == 0)
    {
        printf("%d", f->number);
        return 0;
    }
    printf("NO");
    return 0;
}

int main()
{
    char name[30];
    int number[20];
    char nname[30];
    char comand[6];
    help *l = malloc(sizeof(help));
    l->head = NULL;
    l->end = NULL;
    while(scanf("%s", comand) != EOF)
    {
        if (strcmp(comand, "INSERT") == 0)
        {
            record* new = malloc(sizeof(record));
            scanf("%s", new->name);
            scanf("%d", new->number);
            new->next = NULL;
            new->prev = NULL;
            INSERT(l, new);
        }
        if (strcmp(comand, "FIND") == 0)
        {
            scanf("%s", &nname);
            FIND(l, nname);
        }
    }
    return 0;
}
